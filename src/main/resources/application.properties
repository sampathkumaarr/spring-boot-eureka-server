########################################################################
server.port=61002
spring.application.name=spring-boot-eureka-server
server.servlet.context-path=/spring-boot-eureka-server
# eureka.instance.instanceId=
# eureka.instance.preferIpAddress=
eureka.instance.appname=${spring.application.name}
eureka.instance.hostname=localhost
eureka.datacenter=site1
eureka.environment=test
# Eureka Self preservation helps to survive the application in terms of Network blips. But we
# are setting it ti "false" assuming we won't get into Network blips.
eureka.server.enableSelfPreservation=false
# If we enable self preservation mode, then we need to set the renewalPercentThreshold properties.
# eureka.server.renewalPercentThreshold=3
# eureka.server.renewalThresholdUpdateIntervalMs=120000
########################################################################
eureka.server.evictionInterwalTimerInMs=60000
eureka.server.waitTimeInMsWhenSyncEmpty=120000
# Use the below property while deploying Eureka Server clusters with more than 1 Eureka Server.
#eureka.client.serviceUrl.defaultZone=http://10.11.12.12:61002/spring-boot-eureka-server/eureka,http://10.11.12.12:61022/spring-boot-eureka-server/eureka
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
# set above properties to "true" when using Eureka Server clusters with more than 1 Eureka Server.
########################################################################
logging.config=./src/main/resources/eureka-server-log4j2.xml
########################################################################
#eureka.client.availability-zones.zone1='peer1,peer2'
#eureka.client.availability-zones.zone2='peer1,peer2'
#eureka.client.serviceUrl.peer1=http://peer1:8761/eureka-server/eureka
#eureka.client.serviceUrl.peer2=http://peer1:8761/eureka-server/eureka
########################################################################